/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/Shapes/ellipticalOrbit.js":
/*!******************************************!*\
  !*** ./src/js/Shapes/ellipticalOrbit.js ***!
  \******************************************/
/*! exports provided: ellipticalOrbit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ellipticalOrbit\", function() { return ellipticalOrbit; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector */ \"./src/js/vector.js\");\n // import { Scene } from '../scene';\n\n/**\n * Draw an elliptical orbit\n * @param {*} bodyA Object with pos, mass and velocity, in motion\n * @param {*} bodyB Object with pos and mass, not in motion\n * @param {Number} gConstant Gravitational constant\n * @param {Scene} scene Scene to draw the orbit\n */\n\nfunction ellipticalOrbit(bodyA, bodyB, gConstant, scene, drawOrbit) {\n  var opacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.25;\n  // body A is in motion, body B is stationary\n  // calculate useful values\n  var GMb = bodyB.mass * gConstant; // vector from B to A\n\n  var rVec = bodyA.pos.sub(bodyB.pos);\n  var rLen = rVec.length(); // orbital velocity vector, relative velocity\n\n  var orbVel = bodyA.vel.sub(bodyB.vel);\n  var velSqrd = orbVel.lengthSquared();\n  var rDotVel = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].dot(rVec, orbVel); // find eccentricity vector, https://en.wikipedia.org/wiki/Eccentricity_vector\n\n  var eccVec = rVec.multiply(velSqrd / GMb - 1 / rLen); // eccVec = eccVec.sub(orbVel.multiply(Vec.dot(rVec, orbVel) / GMb));\n\n  eccVec = eccVec.sub(orbVel.multiply(rDotVel / GMb));\n  var eccentricity = eccVec.length(); // find angular momentum https://en.wikipedia.org/wiki/Angular_momentum\n\n  var RPerpA = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].perp(rVec, orbVel); // const horizontalVel = RPerpA / rLen;\n  // const angularVel = RPerpA / (rLen ** 2);\n  // const angularMomentum = (rLen ** 2) * angularVel\n\n  var angularMomentum = RPerpA * bodyA.mass; // find true anomaly https://en.wikipedia.org/wiki/True_anomaly\n\n  var eccDotR = eccVec.dot(rVec);\n  var trueAnomaly = Math.acos(eccDotR / (eccentricity * rLen));\n\n  if (rDotVel < 0) {\n    trueAnomaly = 2 * Math.PI - trueAnomaly;\n  } // find distance between apoapsis and periapsis.\n  // angularMomentum^2/(m^2 y) https://en.wikipedia.org/wiki/Orbit_equation\n\n\n  var constantTerm = Math.pow(angularMomentum, 2) / (GMb * Math.pow(bodyA.mass, 2));\n  var periapsis = constantTerm / (1 + eccentricity);\n  var apoapsis = constantTerm / (1 - eccentricity); // find semi-major and semi-minor axes https://en.wikipedia.org/wiki/Semi-major_and_semi-minor_axes\n\n  var semiMajorAxis = (periapsis + apoapsis) / 2;\n  var semiMinorAxis = semiMajorAxis * Math.sqrt(1 - Math.pow(eccentricity, 2)); // add distance from foci to center (e * semiMajorAxis = linear eccentricity)\n\n  var linearEccVec = eccVec.multiply(-semiMajorAxis);\n  var centerOfEllipse = bodyB.pos.add(linearEccVec); // find coordinates for periapsis and apoapsis\n\n  var semiMajorAxisVec = eccVec.multiply(semiMajorAxis / eccentricity);\n  var periapsisPos = centerOfEllipse.add(semiMajorAxisVec);\n  var apoapsisPos = centerOfEllipse.sub(semiMajorAxisVec);\n\n  if (drawOrbit) {\n    scene.ellipse({\n      pos: centerOfEllipse,\n      radX: semiMajorAxis,\n      radY: semiMinorAxis,\n      rotation: eccVec.angle(),\n      fill: false,\n      stroke: true,\n      strokeColor: \"rgba(255, 255, 255, \".concat(opacity, \")\")\n    }); // draw periapsis\n\n    if (eccentricity < 0.9999) {\n      var dotSize = Math.min(10 / scene.camera.zoom, 200);\n      scene.circle(periapsisPos, dotSize, '#ff777799');\n      scene.circle(apoapsisPos, dotSize, '#7777ff99');\n    }\n  }\n\n  return {\n    trueAnomaly: trueAnomaly,\n    eccentricity: eccentricity,\n    periapsis: periapsis,\n    apoapsis: apoapsis\n  };\n}\n\n//# sourceURL=webpack:///./src/js/Shapes/ellipticalOrbit.js?");

/***/ }),

/***/ "./src/js/scene.js":
/*!*************************!*\
  !*** ./src/js/scene.js ***!
  \*************************/
/*! exports provided: Scene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scene\", function() { return Scene; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./src/js/vector.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar Scene =\n/*#__PURE__*/\nfunction () {\n  function Scene(canvasId) {\n    _classCallCheck(this, Scene);\n\n    this.canvas = document.getElementById(canvasId); // set initial size\n\n    this.canvas.height = $(window).height();\n    this.canvas.width = $(window).width();\n    this.canvasSize = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](this.canvas.width, this.canvas.height);\n\n    var _self = this; // automatic resize\n\n\n    $(window).resize(function () {\n      _self.canvas.height = $(window).height();\n      _self.canvas.width = $(window).width();\n\n      _self.canvasSize.set(_self.canvas.width, _self.canvas.height);\n    });\n    this.ctx = this.canvas.getContext('2d');\n    this.camera = {\n      pos: new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](0, 0),\n      zoom: 1\n    };\n  }\n\n  _createClass(Scene, [{\n    key: \"clear\",\n    value: function clear() {\n      this.ctx.fillStyle = '#333';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height); // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }, {\n    key: \"drawSprite\",\n    value: function drawSprite(sprite) {\n      sprite.drawMe(this);\n    }\n    /**\n     * Convert to scene coordinates\n     * @param {Vec2} pos coordinates\n     * @returns {Vec2}\n     */\n\n  }, {\n    key: \"calculateCoords\",\n    value: function calculateCoords(pos) {\n      // calculate coordinates based on camera position\n      var newPos = pos.sub(this.camera.pos).multiply(this.camera.zoom);\n      newPos = newPos.add(this.canvasSize.divide(2));\n      return newPos;\n    }\n  }, {\n    key: \"fillAndClose\",\n    value: function fillAndClose(fill, color) {\n      var stroke = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var strokeColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#555';\n      this.ctx.fillStyle = color;\n\n      if (fill) {\n        this.ctx.fill();\n      }\n\n      if (stroke) {\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = strokeColor;\n        this.ctx.stroke();\n      }\n\n      this.ctx.closePath();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    } // Draw a circle with the given position, radius and color\n\n  }, {\n    key: \"circle\",\n    value: function circle(pos, radius) {\n      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#000000';\n      var rotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var offset = arguments.length > 4 ? arguments[4] : undefined;\n      // console.log(pos instanceof Vec2)\n      var scaledRadius = radius * this.camera.zoom;\n\n      if (scaledRadius < 0.7) {\n        // don't render tiny primitives.\n        return;\n      }\n\n      var posVec = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].toVector(pos);\n      var newPos = this.calculateCoords(posVec);\n      this.ctx.translate(newPos.x, newPos.y);\n      this.ctx.beginPath(); // with offset\n\n      if (offset) {\n        // with offset\n        this.ctx.rotate(rotation);\n        var scaledOffset = offset.multiply(this.camera.zoom);\n        this.ctx.arc(scaledOffset.x, scaledOffset.y, scaledRadius, 0, 2 * Math.PI, false);\n      } else {\n        this.ctx.arc(0, 0, scaledRadius, 0, 2 * Math.PI, false);\n      }\n\n      this.fillAndClose(true, color);\n    }\n    /**\n     * Draw a rectangle\n     * @param {Vec2} pos Position\n     * @param {Number} width Width of rectangle\n     * @param {Number} height Height of rectangle\n     * @param {Number} rotation Angle\n     * @param {String} color Hex color\n     * @param {Vec2} offset Drawing offset\n     * @param {Boolean} stroke Draw stroke\n     */\n\n  }, {\n    key: \"rect\",\n    value: function rect(pos, width, height) {\n      var rotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '#000000';\n      var offset = arguments.length > 5 ? arguments[5] : undefined;\n      var stroke = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var fill = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;\n      var newPos = this.calculateCoords(pos);\n      var newWidth = width * this.camera.zoom;\n      var newHeight = height * this.camera.zoom;\n      this.ctx.beginPath();\n      this.ctx.translate(newPos.x, newPos.y);\n      this.ctx.rotate(rotation);\n\n      if (offset) {\n        // with offset\n        var scaledOffset = offset.multiply(this.camera.zoom);\n        this.ctx.rect(-newWidth / 2 + scaledOffset.x, -newHeight / 2 + scaledOffset.y, newWidth, newHeight);\n      } else {\n        this.ctx.rect(-newWidth / 2, -newHeight / 2, newWidth, newHeight);\n      }\n\n      this.fillAndClose(fill, color, stroke);\n    }\n    /**\n     * Draw a radial gradient\n     * @param {Vec2} pos position\n     * @param {Number} startRadius Start radius of gradient\n     * @param {Number} stopRadius End radius of gradient\n     * @param {Object} param Color settings\n     * @param {String} startColor Start color of gradient\n     * @param {String} stopColor Stop color of gradient\n     */\n\n  }, {\n    key: \"circleGradient\",\n    value: function circleGradient(pos, startRadius, stopRadius) {\n      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          _ref$startColor = _ref.startColor,\n          startColor = _ref$startColor === void 0 ? 'rgba(170, 170, 255, 0.6)' : _ref$startColor,\n          _ref$stopColor = _ref.stopColor,\n          stopColor = _ref$stopColor === void 0 ? 'rgba(255, 255, 255, 0)' : _ref$stopColor;\n\n      // const newPos = this.calculateCoords(pos);\n      var newStartRadius = startRadius * this.camera.zoom;\n      var newStopRadius = stopRadius * this.camera.zoom;\n      var grd = this.ctx.createRadialGradient(0, 0, newStartRadius, 0, 0, newStopRadius);\n      grd.addColorStop(0, startColor);\n      grd.addColorStop(1, stopColor);\n      this.circle(pos, stopRadius, grd);\n    }\n    /**\n     * Generate an ellipse\n     * @param {Object} conf The settings\n     * @param {Vec2} conf.pos Position vector\n     * @param {Number} conf.radX Minor radius\n     * @param {Number} conf.ranY Major radius\n     * @param {Number} conf.rotation Rotation in radians\n     * @param {String} conf.color Color of the ellipse\n     * @param {Number} conf.startAngle Starting angle in radians\n     * @param {Number} conf.endAngle Ending angle in radians\n     * @param {Vec2} conf.offset offset vector\n     * @param {Boolean} stroke add outline\n     */\n\n  }, {\n    key: \"ellipse\",\n    value: function ellipse() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          pos = _ref2.pos,\n          _ref2$radX = _ref2.radX,\n          radX = _ref2$radX === void 0 ? 5 : _ref2$radX,\n          _ref2$radY = _ref2.radY,\n          radY = _ref2$radY === void 0 ? 2 : _ref2$radY,\n          _ref2$rotation = _ref2.rotation,\n          rotation = _ref2$rotation === void 0 ? 0 : _ref2$rotation,\n          _ref2$color = _ref2.color,\n          color = _ref2$color === void 0 ? '#000000' : _ref2$color,\n          _ref2$startAngle = _ref2.startAngle,\n          startAngle = _ref2$startAngle === void 0 ? 0 : _ref2$startAngle,\n          _ref2$endAngle = _ref2.endAngle,\n          endAngle = _ref2$endAngle === void 0 ? 2 * Math.PI : _ref2$endAngle,\n          offset = _ref2.offset,\n          _ref2$stroke = _ref2.stroke,\n          stroke = _ref2$stroke === void 0 ? false : _ref2$stroke,\n          _ref2$strokeColor = _ref2.strokeColor,\n          strokeColor = _ref2$strokeColor === void 0 ? '#000000' : _ref2$strokeColor,\n          _ref2$fill = _ref2.fill,\n          fill = _ref2$fill === void 0 ? true : _ref2$fill;\n\n      var newPos = this.calculateCoords(pos);\n      var newRadX = radX * this.camera.zoom;\n      var newRadY = radY * this.camera.zoom;\n      this.ctx.beginPath();\n      this.ctx.translate(newPos.x, newPos.y);\n      this.ctx.rotate(rotation);\n\n      if (offset) {\n        // with offset\n        var newOffset = offset.multiply(this.camera.zoom);\n        this.ctx.ellipse(newOffset.x, newOffset.x, newRadX, newRadY, 0, startAngle, endAngle);\n      } else {\n        this.ctx.ellipse(0, 0, newRadX, newRadY, 0, startAngle, endAngle);\n      }\n\n      this.fillAndClose(fill, color, stroke, strokeColor);\n    }\n    /**\n     * Draws a vector\n     * @param {Vec2} pos start of vector\n     * @param {Vec2} theVector\n     */\n\n  }, {\n    key: \"drawVector\",\n    value: function drawVector(pos, theVector) {\n      var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;\n      var scaling = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      // draw a dot, center of mass.\n      this.circle(pos, width * 1.5 * scaling, '#88f');\n      var newStart = this.calculateCoords(pos);\n      var vecEnd = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].add(pos, theVector.multiply(scaling));\n      var newStop = this.calculateCoords(vecEnd);\n      this.ctx.beginPath();\n      this.ctx.moveTo(newStart.x, newStart.y);\n      this.ctx.lineTo(newStop.x, newStop.y);\n      this.ctx.lineWidth = width * this.camera.zoom * scaling;\n      this.ctx.strokeStyle = '#88f';\n      this.ctx.stroke();\n      this.circle(vecEnd, width * 0.6 * scaling, '#88f');\n    }\n  }]);\n\n  return Scene;\n}();\n\n//# sourceURL=webpack:///./src/js/scene.js?");

/***/ }),

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./src/js/vector.js\");\n/* harmony import */ var _scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scene */ \"./src/js/scene.js\");\n/* harmony import */ var _shapes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shapes */ \"./src/js/shapes.js\");\n/* harmony import */ var _sprites_planet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sprites/planet */ \"./src/js/sprites/planet.js\");\n/* harmony import */ var _sprites_rocket__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sprites/rocket */ \"./src/js/sprites/rocket.js\");\n\n\n\n\n\nwindow.stepSize = 1 / 60; // one function for requesting animation frame\n\nwindow.requestAnimFrame = function animationFrame()\n/* callback */\n{\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function nextFrameCallback(cb) {\n    window.setTimeout(cb, 1000 / 60);\n  };\n}();\n/*\nfunction simulateObjects(objList) {\n    for (let i = 0; i < objList.length; i++) {\n        objList[i].simulateFrame();\n    }\n}\n\nfunction drawObjects(objList, context) {\n    for (let i = 0; i < objList.length; i++) {\n        objList[i].drawMe(context);\n    }\n}\n*/\n\n\nvar spriteList = [];\nvar trailList = [];\nvar planetList = [];\nvar scene = null;\nvar glider = null;\nvar counter = 0; // const floor = null;\n\nfunction draw() {\n  counter += 1;\n  scene.clear();\n\n  if (counter % 5 === 0) {\n    trailList.push(new _shapes__WEBPACK_IMPORTED_MODULE_2__[\"Circle\"](glider.pos.x, glider.pos.y, 0.1, '#ffffff77', 0, 0));\n    trailList[1].color = '#ffffff11';\n    trailList[2].color = '#ffffff22';\n    trailList[3].color = '#ffffff33';\n    trailList[4].color = '#ffffff44';\n    trailList[5].color = '#ffffff55';\n    trailList[6].color = '#ffffff66';\n    trailList.shift();\n  }\n\n  for (var i = 0; i < trailList.length; i++) {\n    scene.drawSprite(trailList[i]);\n  }\n\n  for (var _i = 0; _i < spriteList.length; _i++) {\n    scene.drawSprite(spriteList[_i]);\n\n    spriteList[_i].simulateFrame(window.stepSize);\n  } // move camera towards player\n\n\n  var cameraSmooth = Math.min(0.04 + glider.vel.length() / 600, 1);\n  var Delta = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].sub(glider.pos, scene.camera.pos);\n  scene.camera.pos.addInPlace(Delta.multiply(cameraSmooth)); // move 'ground' to player's x-coordinates\n  // floor.pos.x = glider.pos.x;\n\n  var pRad = planetList[0].radius;\n  $('#speed').html(Math.round(glider.vel.length()));\n  $('#distance').html(Math.round((glider.pos.sub(planetList[0].pos).length() - planetList[0].radius) * 100) / 100);\n  $('#eccentricity').html(Math.round(glider.orbitalParams.eccentricity * 100) / 100);\n  $('#apoapsis').html(Math.round((glider.orbitalParams.apoapsis - pRad) * 100) / 100);\n  $('#periapsis').html(Math.round((glider.orbitalParams.periapsis - pRad) * 100) / 100);\n  $('#trueAnomaly').html(Math.round(glider.orbitalParams.trueAnomaly * 100) / 100);\n  window.requestAnimFrame(draw);\n}\n\nfunction init() {\n  scene = new _scene__WEBPACK_IMPORTED_MODULE_1__[\"Scene\"]('canvas');\n  window.scene = scene;\n  scene.camera.zoom = 8; // scene.camera.pos.set(0, -1000);\n\n  $('#simSpeed').change(function () {\n    window.stepSize = $('#simSpeed').val() / 60;\n  });\n  var radP = 25000;\n\n  for (var i = 0; i < 500; i++) {\n    var randX = 100000 * (Math.random() - 0.5);\n    var randY = 100000 * (Math.random() - 0.5) + 10000 + 10;\n    var newBall = new _shapes__WEBPACK_IMPORTED_MODULE_2__[\"Circle\"](randX, randY, 100 + Math.random() * 1000, '#666688');\n    spriteList.push(newBall);\n  }\n\n  for (var _i2 = 0; _i2 < 500; _i2++) {\n    var _randX = 100000 * (Math.random() - 0.5);\n\n    var _randY = 100000 * (Math.random() - 0.5) + 10000 + 10;\n\n    var _newBall = new _shapes__WEBPACK_IMPORTED_MODULE_2__[\"Circle\"](_randX, _randY, Math.random() * 400, '#778899');\n\n    spriteList.push(_newBall);\n  }\n\n  var mainPlanet = new _sprites_planet__WEBPACK_IMPORTED_MODULE_3__[\"Planet\"](0, radP + 10, radP, '#539bc1', 100, 1000000000);\n  spriteList.push(mainPlanet);\n  planetList.push(mainPlanet);\n  glider = new _sprites_rocket__WEBPACK_IMPORTED_MODULE_4__[\"Rocket\"](new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](0, 0), new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](0, 0), 1000, -Math.PI / 2, planetList);\n  spriteList.push(glider);\n\n  for (var _i3 = 0; _i3 < 20; _i3++) {\n    trailList.push(new _shapes__WEBPACK_IMPORTED_MODULE_2__[\"Circle\"](glider.pos.x, glider.pos.y, 0.1, '#ffffff77', 0, 0));\n  } // floor = new Rectangle(0, 620, 10000, 20, 0, '#333333', 0, 0);\n  // spriteList.push(floor);\n\n\n  $(window).bind('mousewheel', function (e) {\n    // console.log(e.originalEvent.wheelDelta)\n    var changeAmount = Math.max(0.01, 1 + e.originalEvent.wheelDelta / 1000);\n    scene.camera.zoom *= changeAmount;\n  });\n  window.requestAnimFrame(draw);\n}\n\n$(window).ready(function () {\n  init();\n});\n\n//# sourceURL=webpack:///./src/js/script.js?");

/***/ }),

/***/ "./src/js/shapes.js":
/*!**************************!*\
  !*** ./src/js/shapes.js ***!
  \**************************/
/*! exports provided: Circle, Rectangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Circle\", function() { return Circle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rectangle\", function() { return Rectangle; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./src/js/vector.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n // import { Scene } from './scene';\n\nvar Circle =\n/*#__PURE__*/\nfunction () {\n  /**\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {String} color\n   * @param {Number} mass\n   * @param {Number} restitution\n   */\n  function Circle(x, y, radius) {\n    var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#000000';\n    var mass = arguments.length > 4 ? arguments[4] : undefined;\n    var restitution = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, Circle);\n\n    this.color = color;\n    this.radius = radius;\n    this.pos = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](x, y);\n    this.speed = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](0, 0);\n    this.restitution = restitution;\n    this.mass = mass;\n    this.inv_mass = 1 / mass; // change position of rectangle\n  }\n\n  _createClass(Circle, [{\n    key: \"changePos\",\n    value: function changePos(x, y) {\n      var change = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](x, y);\n      this.pos = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].add(this.pos, change);\n    }\n  }, {\n    key: \"simulateFrame\",\n    value: function simulateFrame() {//\n    }\n  }, {\n    key: \"drawMe\",\n    value: function drawMe(scene) {\n      scene.circle(this.pos, this.radius, this.color);\n    }\n  }]);\n\n  return Circle;\n}();\nvar Rectangle =\n/*#__PURE__*/\nfunction () {\n  function Rectangle(x, y, width, height, rotation) {\n    var color = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '#000000';\n    var mass = arguments.length > 6 ? arguments[6] : undefined;\n    var restitution = arguments.length > 7 ? arguments[7] : undefined;\n\n    _classCallCheck(this, Rectangle);\n\n    // center i at the center of mass\n    this.color = color;\n    this.width = width;\n    this.height = height;\n    this.rotation = rotation;\n    this.pos = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](x, y);\n    this.speed = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](5, 0);\n    this.restitution = restitution;\n    this.mass = mass;\n    this.inv_mass = 1 / mass;\n  } // change position of rectangle\n\n\n  _createClass(Rectangle, [{\n    key: \"changePos\",\n    value: function changePos(x, y) {\n      var change = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](x, y);\n      this.pos = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].add(this.pos, change);\n    }\n  }, {\n    key: \"simulateFrame\",\n    value: function simulateFrame() {//\n    }\n  }, {\n    key: \"drawMe\",\n    value: function drawMe(scene) {\n      scene.rect(this.pos, this.width, this.height, this.rotation, this.color);\n    }\n  }]);\n\n  return Rectangle;\n}();\n\n//# sourceURL=webpack:///./src/js/shapes.js?");

/***/ }),

/***/ "./src/js/sprites/planet.js":
/*!**********************************!*\
  !*** ./src/js/sprites/planet.js ***!
  \**********************************/
/*! exports provided: Planet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Planet\", function() { return Planet; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector */ \"./src/js/vector.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar Planet =\n/*#__PURE__*/\nfunction () {\n  function Planet(x, y, radius) {\n    var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#000000';\n    var atmosHeight = arguments.length > 4 ? arguments[4] : undefined;\n    var mass = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n\n    _classCallCheck(this, Planet);\n\n    this.color = color;\n    this.radius = radius;\n    this.atmStart = radius;\n    this.atmEnd = radius + atmosHeight;\n    this.pos = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](x, y);\n    this.vel = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](0, 0);\n    this.mass = mass;\n    this.inv_mass = 1 / mass;\n  }\n\n  _createClass(Planet, [{\n    key: \"simulateFrame\",\n    value: function simulateFrame() {//\n    }\n  }, {\n    key: \"drawMe\",\n    value: function drawMe(scene) {\n      scene.circleGradient(this.pos, this.atmStart, this.atmEnd, {\n        startColor: 'rgba(170, 170, 255, 0.6)',\n        stopColor: 'rgba(100, 100, 200, 0)'\n      });\n      scene.circle(this.pos, this.radius, this.color);\n      scene.circle(this.pos, this.radius / 200, '#00000099');\n    }\n  }]);\n\n  return Planet;\n}();\n\n//# sourceURL=webpack:///./src/js/sprites/planet.js?");

/***/ }),

/***/ "./src/js/sprites/rocket.js":
/*!**********************************!*\
  !*** ./src/js/sprites/rocket.js ***!
  \**********************************/
/*! exports provided: Rocket */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rocket\", function() { return Rocket; });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vector */ \"./src/js/vector.js\");\n/* harmony import */ var _Shapes_ellipticalOrbit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Shapes/ellipticalOrbit */ \"./src/js/Shapes/ellipticalOrbit.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n // import { Scene } from '../scene';\n\nvar Rocket =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Vec2} pos Starting position\n   * @param {Vec2} vel Starting velocity\n   * @param {Number} mass mass\n   * @param {Number} angle angle in radians\n   * @param {Array} planetList a list of planets\n   */\n  function Rocket(pos, vel, mass, angle, planetList) {\n    var _this = this;\n\n    _classCallCheck(this, Rocket);\n\n    // dynamics\n    this.pos = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].toVector(pos);\n    this.vel = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].toVector(vel);\n    this.acc = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](0, 0);\n    this.thrust = 0; // thrust in radial direction\n\n    this.thrustChange = 0;\n    this.mass = mass;\n    this.angle = angle;\n    this.angularVel = 0;\n    this.angularAcc = 0;\n    this.orbitalParams = {\n      trueAnomaly: 0,\n      eccentricity: 0,\n      periapsis: 0,\n      apoapsis: 0\n    };\n    this.rocketHeight = 1.8;\n    this.rocketWidth = 0.6; // main planet\n\n    this.planetList = planetList; // settings\n\n    this.minThrust = 0;\n    this.maxThrust = 5000;\n    this.dragCoefficient = 0; // 0.00003;\n\n    this.gConstant = 1;\n\n    var _self = this;\n\n    $(window).keydown(function (e) {\n      switch (e.which) {\n        // left/right\n        case 37:\n          _self.angularAcc = -1;\n          break;\n\n        case 39:\n          _self.angularAcc = 1;\n          break;\n        // up/down\n\n        case 38:\n          _self.thrustChange = _this.maxThrust / 50;\n          break;\n\n        case 40:\n          _self.thrustChange = -_this.maxThrust / 50;\n          break;\n\n        default:\n          break;\n      }\n    });\n    $(window).keyup(function (e) {\n      switch (e.which) {\n        // left/right\n        case 37:\n          _self.angularAcc = 0;\n          break;\n\n        case 39:\n          _self.angularAcc = 0;\n          break;\n        // up/down\n\n        case 38:\n          _self.thrustChange = 0;\n          break;\n\n        case 40:\n          _self.thrustChange = 0;\n          break;\n\n        default:\n          break;\n      }\n    });\n  }\n  /**\n   *\n   * @param {Scene} scene Scene to draw the shape\n   */\n\n\n  _createClass(Rocket, [{\n    key: \"drawMe\",\n    value: function drawMe(scene) {\n      var planet = this.planetList[0]; // DRAW PREDICTED PATH\n\n      var drawOrbit = scene.camera.zoom < 15;\n      this.orbitalParams = Object(_Shapes_ellipticalOrbit__WEBPACK_IMPORTED_MODULE_1__[\"ellipticalOrbit\"])(this, planet, this.gConstant, scene, drawOrbit); // Draw fire first\n\n      var randAngle = (Math.random() - 0.5) * 0.02;\n      var fireLength = this.thrust / this.maxThrust * 1 - 0.05 * Math.random();\n      var fireOffset = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](-(this.rocketHeight / 2) - fireLength / 2, 0);\n      scene.rect(this.pos, fireLength, 0.2, this.angle + randAngle, '#fd753daa', fireOffset);\n      randAngle = (Math.random() - 0.5) * 0.05;\n      fireLength = this.thrust / this.maxThrust * 0.6 - 0.08 * Math.random();\n      fireOffset = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](-(this.rocketHeight / 2) - fireLength / 2, 0);\n      scene.rect(this.pos, fireLength, 0.1, this.angle + randAngle, '#ffd97677', fireOffset); // draw rocket body\n\n      scene.rect(this.pos, this.rocketHeight, this.rocketWidth, this.angle, '#ffffff', null, false);\n      scene.circle(this.pos, this.rocketWidth / 2, '#ffffff', this.angle, new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](this.rocketHeight / 2, 0)); // draw velocity vector\n\n      if (scene.camera.zoom < 1.5) {\n        // if zoomed out\n        scene.drawVector(this.pos, this.vel, 2, 0.5 / scene.camera.zoom);\n        scene.circle(this.pos, 2 / scene.camera.zoom, '#ffffff');\n      } else {\n        scene.drawVector(this.pos, this.vel, 0.2, 0.25);\n      }\n    }\n    /**\n     * Simulate next timestep\n     * @param {Array} interactList A list of sprite objects to interact with.\n     * @param {Number} dt The simulation timestep\n     */\n\n  }, {\n    key: \"simulateFrame\",\n    value: function simulateFrame(dt) {\n      var planet = this.planetList[0];\n      var rVec = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].sub(this.pos, planet.pos); // from planet to rocket\n\n      var rLenSqrd = rVec.lengthSquared();\n      var rVecUnit = rVec.unit();\n\n      if (rLenSqrd < Math.pow(planet.radius, 2)) {\n        // collision with planet\n        var velLength = this.vel.length();\n\n        if (velLength > 1) {\n          // show crash\n          $('#crash').html(\"CRASHED AT \".concat(Math.round(velLength), \" px/s\"));\n          window.setTimeout(function () {\n            $('#crash').html('');\n          }, 5000);\n        }\n\n        var restitution = this.vel.lengthSquared() < 3 ? 0.0 : 0.3;\n        var changeVel = rVecUnit.multiply((1 + restitution) * Math.abs(rVecUnit.dot(this.vel)));\n        this.vel.addInPlace(changeVel); // find delta and move to prevent intersect\n\n        var rVecToSurface = rVecUnit.multiply(planet.radius);\n        var deltaToSurface = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].sub(rVecToSurface, rVec).multiply(1.1);\n        this.pos.addInPlace(deltaToSurface);\n      } // update angle using velocity verlet\n\n\n      this.angle += this.angularVel * dt + 0.5 * this.angularAcc * Math.pow(dt, 2);\n      this.angularVel += this.angularAcc * dt;\n      this.angularVel *= 1 - 0.5 * dt; // dampening\n      // Update thrust\n\n      this.thrust += this.thrustChange;\n      this.thrust = Math.min(this.maxThrust, Math.max(this.minThrust, this.thrust)); // limit\n      // FORCES\n\n      var sumForces = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vec2\"](0, 0); // Thrust force\n\n      var thrustForce = _vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].unit(this.angle, this.thrust); // In the radial direction\n\n      sumForces.addInPlace(thrustForce); // add thrust force\n      // drag\n\n      var velUnit = this.vel.unit();\n      var drag = velUnit.multiply(-this.vel.lengthSquared() * this.dragCoefficient); // Cd*v^2 in opposite direction\n\n      sumForces.addInPlace(drag); // gravity\n      // sumForces.y += 0.05;\n\n      var gravity = rVecUnit.multiply(-this.gConstant * this.mass * planet.mass / rLenSqrd);\n      sumForces.addInPlace(gravity); // update position and velocity using velocity verlet\n      // new acceleration * timestep\n\n      var newAccDt = sumForces.multiply(dt / this.mass);\n      this.pos.addInPlace(_vector__WEBPACK_IMPORTED_MODULE_0__[\"Vector\"].add(this.vel.multiply(dt), newAccDt.multiply(dt)));\n      this.vel.addInPlace(newAccDt); // update velocity\n    }\n  }]);\n\n  return Rocket;\n}();\n\n//# sourceURL=webpack:///./src/js/sprites/rocket.js?");

/***/ }),

/***/ "./src/js/vector.js":
/*!**************************!*\
  !*** ./src/js/vector.js ***!
  \**************************/
/*! exports provided: Vec2, Vector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vec2\", function() { return Vec2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vector\", function() { return Vector; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Vec2 =\n/*#__PURE__*/\nfunction () {\n  function Vec2(x, y) {\n    _classCallCheck(this, Vec2);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Vec2, [{\n    key: \"set\",\n    value: function set(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      // console.log(this.x)\n      return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n    }\n    /**\n     * @returns {Vec2}\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.hypot(this.x, this.y);\n    }\n    /**\n     * Unit vector in the same direction\n     * @param {Number} length\n     * @returns {Vec2}\n     */\n\n  }, {\n    key: \"unit\",\n    value: function unit() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var vecLength = this.length();\n\n      if (vecLength === 0) {\n        // no length, return vector with angle 0\n        return new Vec2(1 * length, 0);\n      }\n\n      return this.multiply(length / vecLength);\n    }\n    /**\n     * vector division\n     * @returns {Vec2}\n     */\n\n  }, {\n    key: \"divide\",\n    value: function divide(d) {\n      return new Vec2(this.x / d, this.y / d);\n    } // vector multiplication\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(m) {\n      return new Vec2(this.x * m, this.y * m);\n    }\n  }, {\n    key: \"add\",\n    value: function add(b) {\n      return new Vec2(this.x + b.x, this.y + b.y);\n    }\n    /**\n     * Add another vector in place.\n     * @param {Vec2} b Another vector\n     */\n\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(b) {\n      this.x += b.x;\n      this.y += b.y;\n    } // this - vector b\n\n  }, {\n    key: \"sub\",\n    value: function sub(b) {\n      return new Vec2(this.x - b.x, this.y - b.y);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(b) {\n      return this.x * b.x + this.y * b.y;\n    }\n  }, {\n    key: \"angle\",\n    value: function angle() {\n      return Math.atan2(this.y, this.x);\n    }\n  }, {\n    key: \"print\",\n    value: function print() {\n      console.log(\"\".concat(this.x, \", \").concat(this.y));\n    }\n  }, {\n    key: \"containsNaN\",\n    value: function containsNaN() {\n      return Number.isNaN(this.x) || Number.isNaN(this.y);\n    }\n  }]);\n\n  return Vec2;\n}();\nvar Vector = {\n  add: function add(a, b) {\n    return new Vec2(a.x + b.x, a.y + b.y);\n  },\n  sub: function sub(a, b) {\n    return new Vec2(a.x - b.x, a.y - b.y);\n  },\n  dot: function dot(a, b) {\n    return a.x * b.x + a.y * b.y;\n  },\n  toVector: function toVector(obj) {\n    if (obj instanceof Vec2) {\n      return obj;\n    }\n\n    return new Vec2(obj[0], obj[1]);\n  },\n\n  /**\n   * Generate a unit vector\n   * @param {Number} angle In radians\n   * @param {Number} length Length of vector\n   */\n  unit: function unit(angle) {\n    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return new Vec2(length * Math.cos(angle), length * Math.sin(angle));\n  },\n\n  /**\n   * Area of parallelogram spanned by a and b.\n   * Equal to z-component of cross product in 3d.\n   * @param {Vector2} a First vector\n   * @param {Vector2} b Second vector\n   */\n  perp: function perp(a, b) {\n    // TODO\n    return a.x * b.y - a.y * b.x;\n  }\n};\n\n//# sourceURL=webpack:///./src/js/vector.js?");

/***/ })

/******/ });