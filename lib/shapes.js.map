{"version":3,"sources":["../src/shapes.js"],"names":["Rocket","pos","vel","mass","angle","Vec","toVector","acc","Vec2","thrust","thrustChange","angularVel","angularAcc","minThrust","maxThrust","dragCoefficient","_self","$","window","keydown","e","which","keyup","scene","fireLength","rect","drawVector","multiply","Math","min","max","sumForces","thrustForce","unit","addInPlace","velUnit","drag","lengthSquared","planet","rVec","sub","rLenSqrd","mPlanet","gravity","newAcc","divide","Circle","x","y","radius","color","restitution","speed","inv_mass","change","add","circle","Rectangle","width","height","rotation","abs","canvas","changePos"],"mappings":"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","sourcesContent":["import { Vector2D as Vec2, Vector as Vec } from './vector';\n// import { Scene } from './scene';\n\nexport class Rocket {\n    /**\n     * @constructor\n     * @param {Vec2} pos Starting position\n     * @param {Vec2} vel Starting velocity\n     * @param {Number} mass mass\n     * @param {Number} angle angle in radians\n     */\n    constructor(pos, vel, mass, angle) {\n        this.pos = Vec.toVector(pos);\n        this.vel = Vec.toVector(vel);\n        this.acc = new Vec2(0, 0);\n        this.thrust = 0; // thrust in radial direction\n        this.thrustChange = 0;\n\n        this.mass = mass;\n        this.angle = angle;\n        this.angularVel = 0;\n        this.angularAcc = 0;\n\n        // settings\n        this.minThrust = 0;\n        this.maxThrust = 0.3;\n        this.dragCoefficient = 0; // 0.00003;\n\n        const _self = this;\n        $(window).keydown((e) => {\n            switch (e.which) {\n            // left/right\n            case 37:\n                _self.angularAcc = -0.001;\n                break;\n\n            case 39:\n                _self.angularAcc = 0.001;\n                break;\n\n                // up/down\n            case 38:\n                _self.thrustChange = 0.005;\n                break;\n\n            case 40:\n                _self.thrustChange = -0.005;\n                break;\n\n            default:\n                break;\n            }\n        });\n\n        $(window).keyup((e) => {\n            switch (e.which) {\n            // left/right\n            case 37:\n                _self.angularAcc = 0;\n                break;\n\n            case 39:\n                _self.angularAcc = 0;\n                break;\n                // up/down\n            case 38:\n                _self.thrustChange = 0;\n                break;\n            case 40:\n                _self.thrustChange = 0;\n                break;\n            default:\n                break;\n            }\n        });\n    }\n\n    /**\n     *\n     * @param {Scene} scene Scene to draw the shape\n     */\n    drawMe(scene) {\n        const fireLength = this.thrust * 300;\n        scene.rect(this.pos, fireLength, 3, this.angle, '#ff0000', new Vec2(-30 - fireLength / 2, 0));\n        scene.rect(this.pos, 60, 14, this.angle, '#ffffff');\n\n        // draw velocity vector\n        scene.drawVector(this.pos, this.vel.multiply(2));\n    }\n\n    simulateFrame() {\n        // update angle\n        this.angularVel += this.angularAcc;\n        this.angle += this.angularVel;\n\n        // Update thrust\n        this.thrust += this.thrustChange;\n        this.thrust = Math.min(this.maxThrust, Math.max(this.minThrust, this.thrust)); // limit\n\n        // FORCES\n        const sumForces = new Vec2(0, 0);\n\n        // Thrust force\n        const thrustForce = Vec.unit(this.angle, this.thrust); // In the radial direction\n        sumForces.addInPlace(thrustForce); // add thrust force\n\n        // drag\n        const velUnit = this.vel.unit();\n        const drag = velUnit.multiply(-this.vel.lengthSquared() * this.dragCoefficient); // Cd*v^2 in opposite direction\n        sumForces.addInPlace(drag);\n\n        // gravity\n        // sumForces.y += 0.05;\n        const planet = new Vec2(0, 1000 + 600);\n        const rVec = Vec.sub(planet, this.pos);\n        const rLenSqrd = rVec.lengthSquared();\n        const mPlanet = 10000;\n        const gravity = rVec.unit(mPlanet / rLenSqrd);\n        sumForces.addInPlace(gravity);\n\n\n        // update position and velocity\n        const newAcc = sumForces.divide(this.mass);\n        this.vel.addInPlace(newAcc); // update velocity\n        this.pos.addInPlace(this.vel); // update position\n\n\n        // bounce\n        /*\n        if (this.pos.y > 600) {\n            this.vel.y = -Math.abs(this.vel.y) * 0.2\n            this.pos.y = 600;\n        } *//*\n        if (this.pos.x > 3000) {\n            this.pos.x = -3000;\n        } */\n    }\n}\n\nexport class Circle {\n    /**\n     *\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} radius\n     * @param {String} color\n     * @param {Number} mass\n     * @param {Number} restitution\n     */\n    constructor(x, y, radius, color = '#000000', mass, restitution) {\n        this.color = color;\n        this.radius = radius;\n        this.pos = new Vec2(x, y);\n        this.speed = new Vec2(0, 0);\n        this.restitution = restitution;\n        this.mass = mass;\n        this.inv_mass = 1 / mass;\n\n        // change position of rectangle\n    }\n\n    changePos(x, y) {\n        const change = new Vec2(x, y);\n        this.pos = Vec.add(this.pos, change);\n    }\n\n    /*\n    simulateFrame() {\n        this.changePos(this.speed.x, this.speed.y)\n        this.speed = vec.add(this.speed, new Vec2(0, 1))\n\n        if (this.pos.x + this.radius > canvas.width) {\n            this.speed.x = -(Math.abs(this.speed.x));\n    }\n        if (this.pos.x - this.radius < 0) {\n            this.speed.x = Math.abs(this.speed.x);\n        }\n        else if (this.pos.y + this.radius > canvas.height) {\n            //this.speed.y = Math.min(-(Math.abs(this.speed.y)) * 0.6, -Math.random()*25);\n            this.speed.y = -(Math.abs(this.speed.y)) * 0.6\n            //this.speed.x = this.speed.x * 0.6 + ((Math.random()-0.5)*20);\n            this.speed.x = this.speed.x;\n\n            this.changePos(0, canvas.height - (this.pos.y + this.radius));\n        }\n        else if (this.pos.y - this.radius < 0) {\n            this.speed.y = Math.abs(this.speed.y);\n        }\n    } */\n\n    drawMe(scene) {\n        scene.circle(this.pos, this.radius, this.color);\n    }\n}\n\nexport class Rectangle {\n    constructor(x, y, width, height, rotation, color = '#000000', mass, restitution) {\n        // center i at the center of mass\n        this.color = color;\n        this.width = width;\n        this.height = height;\n        this.rotation = rotation;\n        this.pos = new Vec2(x, y);\n        this.speed = new Vec2(5, 0);\n        this.restitution = restitution;\n        this.mass = mass;\n        this.inv_mass = 1 / mass;\n    }\n\n    // change position of rectangle\n    changePos(x, y) {\n        const change = new Vec2(x, y);\n        this.pos = Vec.add(this.pos, change);\n    }\n\n    simulateFrame() {\n        /*\n        this.changePos(this.speed.x, this.speed.y)\n        this.speed = vec.add(this.speed, new Vec2(0, 1))\n*/\n        /*\n        if (this.pos.x + this.radius > canvas.width) {\n            this.speed.x = -(Math.abs(this.speed.x));\n        } */\n        if (this.pos.x - this.radius < 0) {\n            this.speed.x = Math.abs(this.speed.x);\n        } else if (this.pos.y + this.radius > canvas.height) {\n            // this.speed.y = Math.min(-(Math.abs(this.speed.y)) * 0.6, -Math.random()*25);\n            this.speed.y = -(Math.abs(this.speed.y)) * 0.6;\n            // this.speed.x = this.speed.x * 0.6 + ((Math.random()-0.5)*20);\n            this.speed.x = this.speed.x;\n\n            this.changePos(0, canvas.height - (this.pos.y + this.radius));\n        } else if (this.pos.y - this.radius < 0) {\n            this.speed.y = Math.abs(this.speed.y);\n        }\n    }\n\n    drawMe(scene) {\n        scene.rect(this.pos, this.width, this.height, this.rotation, this.color);\n    }\n}\n"],"file":"shapes.js"}