{"version":3,"sources":["../src/vector.js"],"names":["Vector2D","x","y","Math","pow","hypot","length","vecLength","multiply","d","m","b","console","log","Vector","add","a","sub","dot","toVector","obj","unit","angle","cos","sin"],"mappings":"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","sourcesContent":["\nexport class Vector2D {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    lengthSquared() {\n        // console.log(this.x)\n        return (Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n\n    /**\n     * @returns {Vector2D}\n     */\n    length() {\n        return Math.hypot(this.x, this.y);\n    }\n\n    /**\n     * Unit vector in the same direction\n     * @param {Number} length\n     * @returns {Vector2D}\n     */\n    unit(length = 1) {\n        const vecLength = this.length();\n        if (vecLength === 0) {\n            // no length, return vector with angle 0\n            return new Vector2D(1 * length, 0);\n        }\n        return this.multiply(length / vecLength);\n    }\n\n    /**\n     * vector division\n     * @returns {Vector2D}\n     */\n    divide(d) {\n        return new Vector2D(this.x / d, this.y / d);\n    }\n\n    // vector multiplication\n    multiply(m) {\n        return new Vector2D(this.x * m, this.y * m);\n    }\n\n    add(b) {\n        return new Vector2D(this.x + b.x, this.y + b.y);\n    }\n\n    /**\n     * Add another vector in place.\n     * @param {Vector2D} b Another vector\n     */\n    addInPlace(b) {\n        this.x += b.x;\n        this.y += b.y;\n    }\n\n    // this - vector b\n    sub(b) {\n        return new Vector2D(this.x - b.x, this.y - b.y);\n    }\n\n    dot(b) {\n        return this.x * b.x + this.y * b.y;\n    }\n\n    print() {\n        console.log(`${this.x}, ${this.y}`);\n    }\n}\n\nexport const Vector = {\n    add(a, b) {\n        return new Vector2D(a.x + b.x, a.y + b.y);\n    },\n\n    sub(a, b) {\n        return new Vector2D(a.x - b.x, a.y - b.y);\n    },\n\n    dot(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n    toVector(obj) {\n        if (obj instanceof Vector2D) {\n            return obj;\n        }\n        return new Vector2D(obj[0], obj[1]);\n    },\n    /**\n     * Generate a unit vector\n     * @param {Number} angle In radians\n     * @param {Number} length Length of vector\n     */\n    unit(angle, length = 1) {\n        return new Vector2D(length * Math.cos(angle), length * Math.sin(angle));\n    },\n};\n"],"file":"vector.js"}